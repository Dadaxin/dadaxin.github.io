<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>第10话 JS 中的函数还有多少容易忽略的细节？</title>
      <link href="/2024/04/21/function/"/>
      <url>/2024/04/21/function/</url>
      
        <content type="html"><![CDATA[<p>这一章主要是基础概念的东西比较多，只要用过 JS 写过代码的，基本都了解。所以，就不多讲那些琐碎的概念。直接拎出每块的小盲点着重强调下。总内容按模块大概如下：<br><img src="/images/function/summary.png" alt="总括图"></p><h1 id="1-箭头函数"><a href="#1-箭头函数" class="headerlink" title="1 箭头函数"></a>1 箭头函数</h1><p>ES6 新增。</p><p>非常适用于嵌入函数的场景，可以简化代码。比如：传给 <code>map</code> 函数。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ints = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ints.<span class="title function_">map</span>(<span class="function"><span class="params">i</span> =&gt;</span> i + <span class="number">1</span>)); <span class="comment">// [2, 3, 4]</span></span><br></pre></td></tr></table></figure><blockquote><p>箭头函数不能使用 <code>arguments</code>、 <code>super</code> 和 <code>new.target</code>，也不能用作构造函数。此外，箭头函数也没有 <code>prototype</code> 属性。</p></blockquote><p>🎒 补给包：箭头函数还有一些其他的特性，比如在执行时，内部的 <code>this</code> 是其定义时所在执行上下文的<code>this</code>，它没有自己的 <code>this</code>，这也是很重要的特性之一。 </p><h1 id="2-函数名"><a href="#2-函数名" class="headerlink" title="2 函数名"></a>2 函数名</h1><p>函数名就是指向函数的指针，所以它们跟其他包含对象指针的变量具有相同的行为。比如，可以覆盖或复制变量值，同时还要注意复制时还是复制的指针，因为函数是引用值。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>) &#125;</span><br><span class="line"><span class="keyword">const</span> bar = foo</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>) &#125; <span class="comment">// 会覆盖前面的 foo</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>() <span class="comment">// 2</span></span><br><span class="line"><span class="title function_">bar</span>() <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>ES6 后暴露一个只读的 <code>name</code> 属性可以读取函数名。如果是使用 Function 构造函数创建，则为 <code>anonymous</code> 。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> bar = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> <span class="title function_">baz</span> = (<span class="params"></span>) =&gt; &#123;&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="property">name</span>); <span class="comment">// foo</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bar.<span class="property">name</span>); <span class="comment">// bar</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(baz.<span class="property">name</span>); <span class="comment">// baz</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>((<span class="function">() =&gt;</span> &#123;&#125;).<span class="property">name</span>); <span class="comment">//（空字符串）</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>((<span class="keyword">new</span> <span class="title class_">Function</span>()).<span class="property">name</span>); <span class="comment">// anonymous</span></span><br></pre></td></tr></table></figure><p>如果函数是一个获取函数、设置函数，或者使用 <code>bind()</code> 实例化，那么标识符前面分别会加上前缀 <code>get</code> <code>set</code> <code>bound</code> 。</p><h1 id="3-理解参数"><a href="#3-理解参数" class="headerlink" title="3 理解参数"></a>3 理解参数</h1><p>参数是按值传递。（其实在 JS 中不用纠结到底是“按值传递”还是“按引用传递”这个概念，总感觉有点歧义，只需要知道如果参数是对象，那么传递的值就是这个对象的引用，也就是如果在函数内部修改了对象的属性，外部的对象属性也会变化）。</p><p>然后我们重点介绍，函数内部与参数相关的一个对象 <code>arguments</code> 。</p><p>这个对象存储着我们在调用函数时传进去的所有参数，它是一个类数组结构，有 <code>length</code> 属性，也可通过下标访问。如下：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>.<span class="property">length</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>[<span class="number">0</span>])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>[<span class="number">2</span>])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>从上面的代码，我们可以看到 <code>arguments[0]</code> 和 <code>a</code> 其实是一样的。<code>a</code> 、<code>b</code>、<code>c</code> 我们称为命名参数，他们是我们在函数定义的时候定义好的参数。</p><p>为什么会有两套参数体系。这是因为在 JS 中，当我们调用函数时，不一定要严格按照所需参数数量传参。上面我们执行 <code>foo(1,2)</code> ，只传入了两个参数，此时 <code>arguments</code> 就类似数组 <code>[1,2]</code>，并且会和命名参数一一对应 <code>argument[0] === a</code> ，<code>arguments[1] = b</code> 。那么命名参数 <code>c</code> 呢？<code>c</code> 由于未传值，所以它没有对应的 <code>arguments</code>， <code>c === undefined</code> 。那如果我们调用时多传了参数呢 <code>foo(1, 2, 3, 4)</code> ？即使我们并没有定义第四个参数，但在函数内部，还是可以发现 <code>arguments[3] === 4</code> 。</p><p>但是，千万也别以为这两套参数体系毫无关系，在非严格模式下，JS 在内部会维护二者的一致性，上面的函数修改 <code>arguments[0]</code>，<code>a</code> 也会跟着改变。当然，严格模式下，二者不会保持一致，而且也不允许更改 <code>arguments</code>。</p><p>🎒 补给包：所以书上介绍了这么多东西，就是不说，<code>arguments</code> 到底有啥用？🙄 以下是一个简单例子哈。比如我们想实现一个求和函数，它可以传入任意数量的数字。在 ES6 之前，核心代码可以这么写：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">const</span> arr = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="variable language_">arguments</span>);</span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>, len = arr.<span class="property">length</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">sum += arr[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>想一下，<code>Array.prototype.push()</code> 是不是可以传入多个参数？所以内部是不是也是利用的 <code>arguments</code> 呢？继续发散，还记得 <code>Object.prototype.call()</code> 和 <code>Object.prototype.apply()</code> 的区别么？他们的实现呢？</p><h1 id="4-没有重载"><a href="#4-没有重载" class="headerlink" title="4 没有重载"></a><del>4 没有重载</del></h1><p>这节不看也可。重载概念是类似 C 语言中的，简单说一下，在很多其他语言中，参数称为签名。签名不同，即使函数名相同，函数也不同，这就是函数重载的概念。但 JS 中的参数可以传入任意个，所以没有签名概念，而且 JS 中声明一个函数，即声明一个对象类型的变量，如果后面再声明相同的变量名，后面的会覆盖前面的。</p><h1 id="5-默认参数值"><a href="#5-默认参数值" class="headerlink" title="5 默认参数值"></a>5 默认参数值</h1><p>ES6 后支持设置默认参数值。默认参数值就是当我们调用函数不传入参数时，参数默认使用的值。</p><p>如下：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sayHello</span>(<span class="params">name = <span class="string">&#x27;world&#x27;</span></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`hello <span class="subst">$&#123;name&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入了 name 的值后，会使用传入值</span></span><br><span class="line"><span class="title function_">sayHello</span>(<span class="string">&#x27;JavaScript&#x27;</span>) <span class="comment">// hello JavaScript</span></span><br><span class="line"><span class="comment">// 不传 name 的时候，会使用我们设置的默认参数值</span></span><br><span class="line"><span class="title function_">sayHello</span>() <span class="comment">// hello world</span></span><br></pre></td></tr></table></figure><p>上面我们说到过，<code>arguments</code> 和命名参数一一对应，会同步改变。但是当我们设置了默认参数值的时候，看起来就和严格模式一样了，二者不会同步更新，且默认参数值只设置在命名参数上。</p><ul><li>🧪 小实验：如果函数多个参数只有一个有默认参数值，其他参数不设置默认参数值，是否也会破坏命名参数和 <code>arguments</code> 的同步？  看下面这个例子：  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sayHello</span>(<span class="params">nameA, nameB = <span class="string">&#x27;world&#x27;</span></span>) &#123;</span><br><span class="line">  nameA = <span class="string">&#x27;JavaScript&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`hello <span class="subst">$&#123;<span class="variable language_">arguments</span>[<span class="number">0</span>]&#125;</span>, <span class="subst">$&#123;nameA&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sayHello</span>(<span class="string">&#x27;front-end&#x27;</span>) <span class="comment">// hello front-end, JavaScript</span></span><br></pre></td></tr></table></figure>  所以，答案是只要有一个参数有默认参数值，就会打破二者的同步。</li></ul><p>默认参数值并不限于原始值或对象类型，也可以使用调用函数返回的值：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> double = <span class="keyword">function</span>(<span class="params">num</span>) &#123; <span class="keyword">return</span> num * <span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">a = <span class="number">1</span>, b = double(a)</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>()  <span class="comment">// 1 2</span></span><br></pre></td></tr></table></figure><p>需要注意的是，上面的例子，参数在内部的运算大致相当于：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="title function_">double</span>(a)</span><br></pre></td></tr></table></figure><p>如果颠倒二者，b 作为第一个参数，a 作为第二个，就会报错。这也被称作默认参数作用域的暂时性死区现象。</p><h1 id="6-参数扩展与收集"><a href="#6-参数扩展与收集" class="headerlink" title="6 参数扩展与收集"></a>6 参数扩展与收集</h1><p>这节就是在说，ES6 新增扩展运算符，所以函数传参的时候使用扩展运算符。具体内容可以看扩展运算符那节。</p><p>🎒补给包：还记得我们上面在讲 <code>arguments</code> 时提到的不确定数量的数字求和函数么。限时回归一下，不用 <code>arguments</code>，ES6 后，可以怎么实现？</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">...nums</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> nums.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, num</span>) =&gt;</span> acc + num)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="7-函数声明与函数表达式"><a href="#7-函数声明与函数表达式" class="headerlink" title="7 函数声明与函数表达式"></a>7 函数声明与函数表达式</h1><blockquote><p>JavaScript 引擎在任何代码执行之前，会先读取函数声明，并在执行上下文中生成函数定义，这被称为函数声明提升（function declaration hoisting）。</p></blockquote><ul><li>🧪 小实验：我们通过一个小实验来看一下函数声明提升和 <code>var</code> 变量提升的差别。  <img src="/images/function/differences_between_var_and_function.png" alt="differences_between_var_and_function">  可以看到 <code>var</code> 变量提升虽然没有报错，但显示为 <code>undefined</code> ，原因就是上面提到的，函数声明提升不仅提升了声明还生成了函数定义。  💬 悄悄喊：尽管到现在我们还是在学 <code>var</code> 和 <code>function</code> ，但其实对环境没要求的时候，我们还是倾向于使用函数表达式，使用 <code>const</code>、<code>let</code>，避免”提升“。JS 是容易使用的语言，但容易使用通常也伴随着难以调试。</li></ul><h1 id="8-函数作为值"><a href="#8-函数作为值" class="headerlink" title="8 函数作为值"></a>8 函数作为值</h1><blockquote><p>因为函数名在 ECMAScript 中就是变量，所以函数可以用在任何可以使用变量的地方。这意味着不仅可以把函数作为参数传给另一个函数，而且还可以在一个函数中返回另一个函数。</p></blockquote><p>🎒补给包：函数可以作为值，是 JS 中函数很特别的原因之一。我们常提到的闭包就是其应用场景之一。后面会详细讲解。如果用过 React， React 中的高阶组件（Higher-Order Component）其实也算应用之一。</p><p>现在，我们先介绍一个应用——科里化。科里化（Currying）是一种将接受多个参数的函数转换成一系列接受一个参数的函数的过程。这样，你可以部分应用一个函数并返回一个新函数，继续传递剩余的参数。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通用的柯里化函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">curry</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">curried</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (args.<span class="property">length</span> &gt;= fn.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...moreArgs</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> curried.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args.<span class="title function_">concat</span>(moreArgs));</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 柯里化示例函数</span></span><br><span class="line"><span class="keyword">const</span> curriedAdd = <span class="title function_">curry</span>(add);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用柯里化函数</span></span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">curriedAdd</span>(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 输出 6</span></span><br></pre></td></tr></table></figure><h1 id="9-函数内部（函数内部的对象）"><a href="#9-函数内部（函数内部的对象）" class="headerlink" title="9 函数内部（函数内部的对象）"></a>9 函数内部（函数内部的对象）</h1><p>ES5 函数内部存在两个特殊的对象：<code>arguments</code> 和 <code>this</code>。ES6 又新增了 <code>new.target</code> 属性。</p><ul><li><code>arguments</code>  前面讲参数的时候已经讲过了，这里着重说一下 <code>arguments</code> 还有个属性 — <code>callee</code>。<code>arguments.callee</code> 指向函数自己。严格模式下，是访问不到的。  这个属性有什么用呢？在写递归函数的时候，可以降低耦合度。  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基本的阶乘函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">factorial</span>(<span class="params">num</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (num &lt;= <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> num * <span class="title function_">factorial</span>(num - <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用 arguments.callee 的阶乘函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">factorial</span>(<span class="params">num</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (num &lt;= <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> num * <span class="variable language_">arguments</span>.<span class="title function_">callee</span>(num - <span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  这样有什么好处呢，如果我们后续修改了 <code>factorial</code> 这个名字，还是可以正常运行。  但是刚刚还说过，严格模式下，<code>arguments.callee</code> 是不能访问的。此时我们可以借助命名函数表达式（named function expression）达到目的。  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> factorial = (<span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (num &lt;= <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> num * <span class="title function_">f</span>(num - <span class="number">1</span>)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>  就是说，红宝书啊，你绕了一圈，好像也还是用处不大 😑。</li><li><code>this</code>  它来啦。它来啦。它带着一堆面试题走来了。  在<a href="https://dadaxin.github.io/2023/12/07/scope-execution-context/">《第4话 来聊聊作用域和执行上下文吧！》</a>中，我们讲了作用域，也强调过作用域是静态的，它取决于函数定义时所在的上下文。而 <code>this</code> 相当于给 JS 加了动态作用域，它是在函数被调用时才确定的。实际上，在一些教程中，执行上下文除了包含我们在<a href="https://dadaxin.github.io/2023/12/07/scope-execution-context/">《第1话》</a>中提到的变量环境、词法环境、作用域链，还包含 <code>this</code>。  具体 this 的指向可以看 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this">MDN</a> 文档，讲得巨详细。  书中主要强调了下箭头函数的 <code>this</code> 。箭头函数的 <code>this</code> 正好相反，它取决于定义时的上下文，而不是调用时才确定。这个特性可以被用在一些地方，比如，用过 React 的类组件应该对此很熟，事件处理函数最好用箭头函数定义，这样可以确保函数内部的 <code>this</code> 绑定到组件实例，而不是绑定到触发事件的 DOM 元素。  另外，使用 <code>Function.prototype.call(thisArg)</code> 或 <code>Function.prototype.apply(thisArg)</code>，可以用给定的上下文调用函数，将任意对象设置为任意函数的作用域。使用 <code>Function.prototype.bind( thisArg)</code> 可以使得函数内部的 <code>this</code> 始终为给定的上下文。</li><li><code>new.target</code>  如果函数被 <code>new</code> 调用，<code>new.target</code> 指向被调用的构造函数，否则是 <code>undefined</code>。</li><li><code>caller</code>  这个属性引用的是调用该函数的外部函数，或者如果是在全局作用域中调用的则为 <code>null</code>。也可以用来解耦两个函数。但平时不会用到。</li></ul><h1 id="10-函数属性与方法"><a href="#10-函数属性与方法" class="headerlink" title="10 函数属性与方法"></a>10 函数属性与方法</h1><p>除了我们前面提到的函数名 <code>name</code>，每个函数还有两个属性： <code>length</code> 和 <code>prototype</code>。</p><ul><li><code>length</code>  <code>length</code> 属性保存函数定义的命名参数的个数。  ⌛ 小提问：<code>length</code> 和 <code>arguments.length</code> 是不是一样？</li><li><code>prototype</code>  是函数实现继承的关键。重头！在讲函数继承的时候会返场讲解。  此时只需要注意，不可枚举，所以 <code>for-in</code> 遍历不出来。</li></ul><p>🎒 补给包：除了这仨属性，每个函数对象还有个继承自原型链的 <code>constructor</code> 属性，这个也在会讲继承的时候详细讲解。</p><p>然后，本节就是介绍函数自带的方法，别以为有很多，其实就几个内置的，且都继承自原型链的：与 <code>this</code> 相关的 <code>call()</code>、 <code>bind()</code> 、<code>apply()</code>，以及 <code>toString()</code> 。</p><p>有关前三个函数的使用方式、应用场景以及模拟实现看 MDN 或者我先给自己挖个坑。</p><h1 id="11-函数表达式"><a href="#11-函数表达式" class="headerlink" title="11 函数表达式"></a>11 函数表达式</h1><p>这节内容也是前几节都讲过了，这节又是重复，主要就下面。</p><blockquote><p>函数表达式看起来就像一个普通的变量定义和赋值，即创建一个函数再把它赋值给一个变量 <code>functionName</code>。这样创建的函数叫作匿名函数（ anonymous funtion），因为 function 关键字后面没有标识符。（匿名函数有也时候也被称为 lamda 函数）。未赋值给其他变量的匿名函数的 name 属性是空字符串。</p></blockquote><h1 id="12-递归"><a href="#12-递归" class="headerlink" title="12 递归"></a>12 递归</h1><blockquote><p>递归函数通常的形式是一个函数通过名称调用自己。</p></blockquote><p>然后，书中又介绍了一遍，上面讲解 <code>arguments.callee</code> 时举的例子：求阶乘的函数（<code>factorial</code>），它就是一个递归函数，我们在上面还提到了两种优化方式。</p><p>我又想说这部分不是前面讲过了嘛！但是学过算法的小伙伴，对递归应该是非常熟悉了，递归写得算法总是很优雅坑又多。</p><h1 id="13-尾调用优化"><a href="#13-尾调用优化" class="headerlink" title="13 尾调用优化"></a>13 尾调用优化</h1><blockquote><p>ECMAScript 6 规范新增了一项内存管理优化机制，<strong>让 JavaScript 引擎在满足条件时可以重用栈帧。</strong></p><p>具体来说，这项优化非常适合“尾调用”，即外部函数的返回值是一个内部函数的返回值。比如：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">outerFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="title function_">innerFunction</span>() <span class="comment">// 尾调用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 ES6 优化之前，执行这个例子会在内存中发生如下操作。</p><p>(1) 执行到 <code>outerFunction</code> 函数体，第一个栈帧被推到栈上。</p><p>(2) 执行 <code>outerFunction</code> 函数体，到 <code>return</code> 语句。计算返回值必须先计算 <code>innerFunction</code>。</p><p>(3) 执行到 <code>innerFunction</code> 函数体，第二个栈帧被推到栈上。</p><p>(4) 执行 <code>innerFunction</code> 函数体，计算其返回值。</p><p>(5) 将返回值传回 <code>outerFunction</code>，然后 <code>outerFunction</code> 再返回值。</p><p>(6) 将栈帧弹出栈外。</p><p>在 ES6 优化之后，执行这个例子会在内存中发生如下操作。</p><p>(1) 执行到 <code>outerFunction</code> 函数体，第一个栈帧被推到栈上。</p><p>(2) 执行 <code>outerFunction</code> 函数体，到达 <code>return</code> 语句。为求值返回语句，必须先求值 <code>innerFunction</code>。</p><p><strong>(3) 引擎发现把第一个栈帧弹出栈外也没问题，因为 <code>innerFunction</code> 的返回值也是 <code>outerFunction</code> 的返回值。</strong></p><p><strong>(4) 弹出 <code>outerFunction</code> 的栈帧。</strong></p><p>(5) 执行到 <code>innerFunction</code> 函数体，栈帧被推到栈上。</p><p>(6) 执行 <code>innerFunction</code> 函数体，计算其返回值。</p><p>(7) 将 <code>innerFunction</code> 的栈帧弹出栈外。</p><p>很明显，第一种情况下每多调用一次嵌套函数，就会多增加一个栈帧。而第二种情况下无论调用多少次嵌套函数，都只有一个栈帧。这就是 ES6 尾调用优化的关键：<strong>如果函数的逻辑允许基于尾调用将其销毁，则引擎就会那么做。</strong></p></blockquote><p>但是也可以猜想到，尾调用优化的条件应该比较严苛。</p><blockquote><p>尾调用优化的条件：</p><ul><li>代码在严格模式下执行；</li><li>外部函数的返回值是对尾调用函数的调用；  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无优化：尾调用没有返回</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">outerFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="title function_">innerFunction</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 无优化：尾调用没有直接返回</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">outerFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">let</span> innerFunctionResult = <span class="title function_">innerFunction</span>();</span><br><span class="line"><span class="keyword">return</span> innerFunctionResult;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>尾调用函数返回后不需要执行额外的逻辑；  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无优化：尾调用返回后必须转型为字符串</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">outerFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="title function_">innerFunction</span>().<span class="title function_">toString</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>尾调用函数不是引用外部函数作用域中自由变量的闭包。  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无优化：尾调用是一个闭包</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">outerFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">let</span> foo = <span class="string">&#x27;bar&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">innerFunction</span>(<span class="params"></span>) &#123; <span class="keyword">return</span> foo; &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="title function_">innerFunction</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><p>下面是几个符合尾调用优化条件的例子：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有优化：初始返回值不涉及栈帧</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">outerFunction</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (a &lt; b) <span class="keyword">return</span> a;</span><br><span class="line"><span class="keyword">return</span> <span class="title function_">innerFunction</span>(a + b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有优化：两个内部函数都在尾部</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">outerFunction</span>(<span class="params">condition</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> condition ? <span class="title function_">innerFunctionA</span>() : <span class="title function_">innerFunctionB</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>利用尾调用优化的实例：</p><p>普通的斐波那契数列：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fib</span>(<span class="params">n</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (n &lt; <span class="number">2</span>) <span class="keyword">return</span> n</span><br><span class="line"><span class="keyword">return</span> <span class="title function_">fib</span>(n - <span class="number">1</span>) + <span class="title function_">fib</span>(n - <span class="number">2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为返回语句中有加法操作，不满足尾调用优化条件。不考虑其他优化方式，比如备忘录或者改成循环。我们看如何利用尾调用优化。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fib</span>(<span class="params">n</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="title function_">fibImpl</span>(<span class="number">0</span>, <span class="number">1</span>, n)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fibImpl</span>(<span class="params">prevOne, prevTwo, count</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (count === <span class="number">0</span>) <span class="keyword">return</span> prevTwo</span><br><span class="line"><span class="keyword">return</span> <span class="title function_">fibImpl</span>(prevOne + prevTwo, prevOne, count - <span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个在写算法代码的时候也可以用。但是这样修改后也有一个显著的问题：代码变得不易读，这也是需要考量的一方面。</p><h1 id="14-闭包"><a href="#14-闭包" class="headerlink" title="14 闭包"></a>14 闭包</h1><blockquote><p>闭包（closure）指的是那些引用了另一个函数作用域中变量的函数，通常是在嵌套函数中实现的。</p></blockquote><p>由于闭包是高频面试题，建议背过这句话，毕竟闭包的定义可宽可窄仁者见仁，但是红宝书算标杆，不容易被过于严谨的面试官撅过去。</p><p>书中对于闭包主要讲了：1. 闭包的形成原理；2. 使用闭包时可能会出现的问题，一个是 <code>this</code> 指向具有迷惑性，另一个是可能出现内存泄漏。</p><p>*️⃣ 闭包的形成原理</p><p>了解闭包形成原理需要先了解执行上下文。我们在<a href="https://dadaxin.github.io/2023/12/07/scope-execution-context/">《第4话 来聊聊作用域和执行上下文吧！》</a>）有讲过，大概来说，每个函数的执行上下文包含：变量对象、词法环境、以及作用域链，我们需要会分析代码执行过程中这几个组成部分具体包含什么。</p><p>我们拿出在《第4话》分析过的那段代码：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sayHello</span>(<span class="params">number</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> defaultName = <span class="string">&#x27;nobody&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params">number</span>) &#123;</span><br><span class="line"><span class="keyword">switch</span> (number): &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>: </span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;world&#x27;</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;China&#x27;</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;ShanDong&#x27;</span></span><br><span class="line"><span class="attr">default</span>:</span><br><span class="line"><span class="keyword">return</span> defaultName</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> name = <span class="title function_">getName</span>(number)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`hello <span class="subst">$&#123;name&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">sayHello</span>(<span class="number">1</span>) <span class="comment">// hello world</span></span><br></pre></td></tr></table></figure><p>我们先来复习下作用域链相关的内容。前面讲过为什么执行 <code>getName(number)</code> 时，我们可以访问到 <code>defaultName</code> ，因为执行到 <code>const name = getName(number)</code> ，它在执行上下文栈的最顶层，<code>sayHello</code> 的作用域就是其作用域链的第一环，所以能访问到 <code>sayHello</code> 的作用域。也就是说，外部函数的作用域会是内部函数作用域链的第一环。</p><p>好，我们接着说闭包。其实，这个内部函数 <code>getName(number)</code> 就可以称为一个闭包，<code>getName(number)</code> 是一个内部函数，且引用了外部函数 <code>sayHello</code> 中的 <code>defaultName</code> 变量。那么它到底有什么特殊之处呢？</p><p>特殊之处在于，如果这个内部函数被当做返回值返回出去，它的作用域链会被初始化为当前的作用域链，依旧包含外部函数的活动对象。即使外部函数销毁，它的作用域链还是不变。</p><p>我们来看个具体的例子。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">countFuncCreator</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;current count is: &#x27;</span>, count++);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> countFunc = <span class="title function_">countFuncCreator</span>();</span><br><span class="line"><span class="title function_">countFunc</span>(); <span class="comment">// current count is: 0</span></span><br><span class="line"><span class="title function_">countFunc</span>(); <span class="comment">// current count is: 1</span></span><br><span class="line"><span class="title function_">countFunc</span>(); <span class="comment">// current count is: 2</span></span><br></pre></td></tr></table></figure><p>当我们执行完 <code>countFuncCreator</code> 时，按理说，其活动对象（其实就是作用域中的变量）也会被一起销毁，但是由于内部定义的匿名函数被返回出去，并赋值给了一个新的变量 <code>countFunc</code> ，所以，<code>countFunc</code> 的作用域链还是会包含 <code>countFuncCreator</code> 的活动对象，所以 <code>count</code> 会一直存在。</p><p>也就是书中所说：</p><blockquote><p>函数执行时，每个执行上下文中都会有一个包含其中变量的对象。全局上下文中的叫变量对象，它会在代码执行期间始终存在。而函数局部上下文中的叫活动对象，只在函数执行期间存在。</p></blockquote><p>变量对象和活动对象其实都是我们前面聊的作用域。</p><blockquote><p>在定义 compare() 函数时，就会为它创建作用域链，预装载全局变量对象，并保存在内部的 [[Scope]] 中。在调用这个函数时，会创建相应的执行上下文，然后通过复制函数的 [[Scope]] 来创建其作用域链。接着会创建函数的活动对象（用作变量对象）并将其推入作用域链的前端。</p></blockquote><p>*️⃣ 闭包中 <code>this</code> 指向问题</p><p>看下面这段代码：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">identity</span> = <span class="string">&#x27;The Window&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> object = &#123;</span><br><span class="line"><span class="attr">identity</span>: <span class="string">&#x27;My Object&#x27;</span>,</span><br><span class="line"><span class="title function_">getIdentityFunc</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">identity</span>;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(object.<span class="title function_">getIdentityFunc</span>()()); <span class="comment">// &#x27;The Window&#x27;</span></span><br></pre></td></tr></table></figure><p>如果我们对 this 指向取决于调用方式非常熟悉的话，这个应该不会错。执行到 <code>return this.indentity</code> 时，是全局直接调用，所以取 <code>window</code> 上的属性。详情可以看 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this">this</a>。</p><p>但是下面这段代码呢：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">identity</span> = <span class="string">&#x27;The Window&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> object = &#123;</span><br><span class="line"><span class="attr">identity</span>: <span class="string">&#x27;My Object&#x27;</span>,</span><br><span class="line"><span class="title function_">getIdentityFunc</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">let</span> that = <span class="variable language_">this</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> that.<span class="property">identity</span>;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(object.<span class="title function_">getIdentityFunc</span>()()); <span class="comment">// &#x27;My Object&#x27;</span></span><br></pre></td></tr></table></figure><p>为什么 <code>this</code> 被保存了一下，返回的结果就不同了呢？这个地方是因为闭包。执行<code>getIdentityFunc()</code> 时，<code>that</code> 会作为被返回的匿名函数的作用链被保存下来。</p><p>*️⃣ 闭包导致的内存泄露问题</p><blockquote><p>由于 IE 在 IE9 之前对 JScript 对象和 COM 对象使用了不同的垃圾回收机制（第 4 章讨论过），所以闭包在这些旧版本 IE 中可能会导致问题。在这些版本的 IE 中，把 HTML 元素保存在某个闭包的作用域中，就相当于宣布该元素不能被销毁。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">assignHandler</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">let</span> element = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;someElement&#x27;</span>);</span><br><span class="line">element.<span class="property">onclick</span> = <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(element.<span class="property">id</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码创建了一个闭包，即 element 元素的事件处理程序（事件处理程序将在第 13 章讨论）。而这个处理程序又创建了一个循环引用。匿名函数引用着 <code>assignHandler()</code> 的活动对象，阻止了对 element 的引用计数归零。只要这个匿名函数存在， element 的引用计数就至少等于 1。也就是说，内存不会被回收。其实只要这个例子稍加修改，就可以避免这种情况，比如：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">assignHandler</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">let</span> element = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;someElement&#x27;</span>); </span><br><span class="line"><span class="keyword">let</span> id = element.<span class="property">id</span>;</span><br><span class="line">element.<span class="property">onclick</span> = <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(id);</span><br><span class="line">element = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个修改后的版本中，闭包改为引用一个保存着 <a href="http://element.id/">element.id</a> 的变量 id，从而消除了循环引用。不过，光有这一步还不足以解决内存问题。因为闭包还是会引用包含函数的活动对象，而其中包含 element。即使闭包没有直接引用 element，包含函数的活动对象上还是保存着对它的引用。因此，必须再把 element 设置为 null。这样就解除了对这个 COM 对象的引用，其引用计数也会减少，从而确保其内存可以在适当的时候被回收。</p></blockquote><p>🎒补给包：一些经常会因为闭包而需要谨慎的地方：</p><ul><li>定时器函数 <code>setTimeout(callback, delay)</code> 以及 <code>setTimeout(callback, delay)</code>：使用定时器函数时，<code>callback</code> 通常需要用到定时器函数外部的变量。如果在执行 <code>callback</code> 的时候，外部的变量改变了，<code>callback</code> 可能不会产生预期的结果。用过 React 的伙伴估计对此都非常熟悉。</li><li>事件处理函数</li></ul><h1 id="15-立即调用的函数表达式"><a href="#15-立即调用的函数表达式" class="headerlink" title="15 立即调用的函数表达式"></a>15 立即调用的函数表达式</h1><blockquote><p>立即调用的匿名函数又被称作立即调用的函数表达式（ IIFE， Immediately Invoked Function Expression）。它类似于函数声明，但由于被包含在括号中，所以会被解释为函数表达式。</p></blockquote><blockquote><p>使用 IIFE 可以模拟块级作用域，即在一个函数表达式内部声明变量，然后立即调用这个函数。这样位于函数体作用域的变量就像是在块级作用域中一样。 ECMAScript 5 尚未支持块级作用域， 使用 IIFE模拟块级作用域是相当普遍的。</p></blockquote><p>比如说下面这段代码：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>最终打印结果是 1s 后，打印了三个 3。为什么会这样，因为我们使用的是 <code>var</code> 关键字来声明 <code>i</code>，这个变量不会限制在每次循环的作用域内，而是三次循环共用一个 <code>i</code>。在执行 <code>setTimeout</code> 的时候，<code>for</code> 循环已经执行过了，<code>i</code> 此时是 3。</p><p>红宝书中是使用事件处理程序来模拟这种奇怪现象，setTimeout 和事件处理程序的共同之处在于它们都不是立即触发，而是后续等待某个时机才触发，等触发时 <code>for</code> 循环都执行过了，<code>i</code> 已经变成 3。</p><p>为了解决这个问题，我们可以利用 IIFE 模拟块级作用域。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  (<span class="keyword">function</span>(<span class="params">index</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(index);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;)(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>这样，每次循环的时候，都会把 <code>i</code> 作为参数 <code>index</code> 传递给内部的匿名函数，这个匿名函数会保留当下的 <code>i</code>。</p><p>但其实 ES6 后我们有了块级作用域。直接使用 <code>let</code> 关键字来声明 <code>i</code>，<code>for</code> 循环就会为每次循环创建独立的变量 <code>i</code>。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>🎒补给包：总得来说，IFEE 一般都是用来隔离变量的，比如上面这种解决变量共享问题<strong>，</strong>还有，实现最简单的模块化等，但在现在的 JS 和模块化完善的今天，用到的比较少了。</p><h1 id="16-私有变量"><a href="#16-私有变量" class="headerlink" title="16 私有变量"></a>16 私有变量</h1><p>😢 本节实在是又长又臭，一直在介绍介绍介绍。试图用我自己的理解简化内容。</p><p>私有变量、私有成员其实是面向对象编程中的概念，用来限制外部对类内部数据和成员的访问，在 Java 等语言中比较重要。与私有变量、私有成员息息相关的另一个概念是特权方法，既然变量或成员是私有的，那必然要提供给外部一个可以访问的方法，这个方法就是特权方法。</p><p>JS 本质上没有类的概念，所谓 class 也只是语法糖，也就没有私有变量和私有成员的概念。</p><p>但是书中说，JS 是有私有变量的（显然和狭隘的定义不太一样），也是有特权方法的。而本节介绍的所有内容是如何用各种方式来模拟实现对象的私有属性及其特权方法。（相当于在对齐类的私有成员概念）</p><p>先介绍一下基本概念：</p><p>首先，JS 中的私有变量是指：</p><blockquote><p>任何定义在函数或块中的变量，都可以认为是私有的，因为在这个函数或块的外部无法访问其中的<br>变量。私有变量包括函数参数、局部变量，以及函数内部定义的其他函数。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line"><span class="keyword">let</span> sum = num1 + num2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数 add()有 3 个私有变量： num1、 num2 和 sum。这几个变量只能在函数内部使<br>用，不能在函数外部访问。</p></blockquote><p>那特权方法呢？能访问这个私有变量的公共方法就是特权方法。</p><p>如何实现呢？这就得用到我们的闭包了。如果这个函数中创建了一个闭包，则这个闭包能通过其作用域链访问其外部的这 3 个变量。忘记闭包的需要回去再搂一眼。</p><p>概念介绍完，我们可以正式开始模拟实现对象属性的私有化和特权方法。先上代码再解释。</p><p>1️⃣ 方式一：使用构造函数</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">getName</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">setName</span> = <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">name = value;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Nicholas&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="title function_">getName</span>()); <span class="comment">// &#x27;Nicholas&#x27;</span></span><br><span class="line">person1.<span class="title function_">setName</span>(<span class="string">&#x27;Matt&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="title function_">getName</span>()); <span class="comment">// &#x27;Matt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person2 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Michael&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="title function_">getName</span>()); <span class="comment">// &#x27;Matt&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person2.<span class="title function_">getName</span>()); <span class="comment">// &#x27;Michael&#x27;</span></span><br></pre></td></tr></table></figure><p><code>person1</code> 和 <code>person2</code> 这两个对象都拥有私有属性 <code>name</code>，访问这个属性的特权方法是使用各自的<code>getName()</code> 和 <code>setName()</code> ，除此之外，并没有方式可以访问到 <code>name</code>。这样做之所以可行，是因为定义在构造函数中的特权方法其实是一个闭包，它具有访问构造函数中定义的所有变量和函数的能力。</p><p>2️⃣ 方式二：使用 IIFE 创建私有作用域</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Person</span>;</span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">// 私有变量</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="title class_">Person</span> = <span class="keyword">function</span>(<span class="params">value</span>) &#123;</span><br><span class="line">name = value;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 特权方法</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">setName</span> = <span class="keyword">function</span>(<span class="params">value</span>) &#123;</span><br><span class="line">name = value;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Nicholas&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="title function_">getName</span>()); <span class="comment">// &#x27;Nicholas&#x27;</span></span><br><span class="line">person1.<span class="title function_">setName</span>(<span class="string">&#x27;Matt&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="title function_">getName</span>()); <span class="comment">// &#x27;Matt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person2 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Michael&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="title function_">getName</span>()); <span class="comment">// &#x27;Michael&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person2.<span class="title function_">getName</span>()); <span class="comment">// &#x27;Michael&#x27;</span></span><br></pre></td></tr></table></figure><p>匿名函数表达式创建了一个包含构造函数及其方法的私有作用域。特权方法定义在原型上。这种方式与方式一的主要区别就是，私有变量、私有函数以及特权方法都是由实例共享的。所以，和方式一不同的是，<code>person1</code> 和 <code>person2</code> 会互相影响。</p><p>3️⃣ 方式三：模块模式</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> application = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">// 私有变量和私有函数</span></span><br><span class="line"><span class="keyword">let</span> components = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 特权方法</span></span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="title function_">getComponentCount</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> components.<span class="property">length</span>;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">registerComponent</span>(<span class="params">component</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> component == <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">components.<span class="title function_">push</span>(component);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure><p>模块模式，是在一个单例对象上实现了相同的隔离和封装。单例对象（singleton）就是只有一个实例的对象。模块模式是在单例对象基础上加以扩展，使其通过作用域链来关联私有变量和特权方法。</p><p>这个简单的例子创建了一个 <code>application</code> 对象用于管理组件。后续可以直接使用特权方法 <code>application.registerComponent()</code> 和 <code>application.getComponentCount</code> 来操作私有属性 <code>components</code>。</p><p>以这种方式创建的每个单例对象都是 Object 的实例，因为最终单例都由一个对象字面量来表示。但是如果我们想使得返回的对象属于某个特定类型，可以像下面这样做：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> application = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">// 私有属性</span></span><br><span class="line"><span class="keyword">let</span> components = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建局部变量保存实例</span></span><br><span class="line"><span class="keyword">let</span> app = <span class="keyword">new</span> <span class="title class_">BaseComponent</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 特权方法</span></span><br><span class="line">app.<span class="property">getComponentCount</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> components.<span class="property">length</span>;</span><br><span class="line">&#125;;</span><br><span class="line">app.<span class="property">registerComponent</span> = <span class="keyword">function</span>(<span class="params">component</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> component == <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">components.<span class="title function_">push</span>(component);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回实例</span></span><br><span class="line"><span class="keyword">return</span> app;</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure><p>内部先创建实例对象，对此进行操作后，再返回作为单例对象。这叫模块增强模式。</p>]]></content>
      
      
      <categories>
          
          <category> 《都 4202 年了，我还在读红宝书！》 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第4话 来聊聊作用域和执行上下文吧！</title>
      <link href="/2023/12/07/scope-execution-context/"/>
      <url>/2023/12/07/scope-execution-context/</url>
      
        <content type="html"><![CDATA[<p>作用域和执行上下文算是硬骨头，让我们做好准备来一口一口嚼碎它。老习惯，还是特意使用流水线不分目录的叙述方式，方便更好地串起知识点。出现 🏷️ 表示注意力需要集中要链接到下一个话题了。</p><h2 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h2><ol><li>JS 是松散类型，深入理解其作用域和执行上下文等概念非常有必要。这一章相当于带我们深入 JS 运行的内部机制。</li><li>在学习之前，首先，我们要意识到，我们写的 JS 代码是一段程序，它运行在 JS 引擎中，不管这个引擎是在浏览器环境，还是在 Node 环境。我们本节讲解的内容就是 JS 引擎在运行 JS 代码时涉及的一些概念。 <strong>先串联一下本章的重要概念：</strong> 在一段代码中，我们会声明一些变量，并把它们赋值为原始类型或引用类型的值。在代码执行过程中，JS 引擎会识别值的类型，将它们存储在内存中不同的地方，并通过“执行上下文”来管理这些值的“作用域”和生命周期。JS 引擎还会帮我们进行内存管理。它的垃圾回收机制会定期检查这些值，当没有变量引用它们时，会将其标记为垃圾数据并释放其占用的内存。 <strong>原始值和引用值的处理、执行上下文的管理，以及垃圾回收的机制，共同构成了 JavaScript 运行时环境中重要的组成部分。</strong></li><li>提醒在前，需要注意的是，我们此时谈论的“作用域”是静态作用域，也就是说，作用域在代码写完的时候就已经定下了。</li></ol><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="在一段代码中，我们会声明一些变量，并把它们赋值为原始类型或引用类型的值。（4-1-原始值和引用值）"><a href="#在一段代码中，我们会声明一些变量，并把它们赋值为原始类型或引用类型的值。（4-1-原始值和引用值）" class="headerlink" title="在一段代码中，我们会声明一些变量，并把它们赋值为原始类型或引用类型的值。（4.1 原始值和引用值）"></a>在一段代码中，我们会声明一些变量，并把它们赋值为原始类型或引用类型的值。（4.1 原始值和引用值）</h3><blockquote><p>ECMAScript 变量可以包含两种不同类型的数据：原始值和引用值。 原始值（primitive value）就是最简单的数据， 引用值（reference value）则是由多个值构成的对象。</p><p>在把一个值赋给变量时， JavaScript 引擎必须确定这个值是原始值还是引用值。上一章讨论了 6 种原始值： Undefined、 Null、 Boolean、 Number、 String 和 Symbol。保存原始值的变量是按值（by value）访问的，因为我们操作的就是存储在变量中的实际值。</p><p>引用值是保存在内存中的对象。<strong>与其他语言不同， JavaScript 不允许直接访问内存位置，因此也就不能直接操作对象所在的内存空间。在操作对象时，实际上操作的是对该对象的引用（reference）而非实际的对象本身</strong>。为此，保存引用值的变量是按引用（by reference）访问的。</p></blockquote><p>原始值和引用值有何不同？</p><ul><li><p>存储方式不同：</p><p>  上面提到了，引用值是存储在特殊的内存空间中，我们称其为堆内存。变量操作的的是该对象的地址引用，而且如果不主动清空，只能借助于引擎的垃圾回收机制销毁。</p><p>  原始值是直接存储在执行上下文栈中的，我们称为栈内存。变量操作的就是原始值本身，而且在代码运行完，即执行上下文栈清空时，也就意味着原始值被销毁了。下面会详细说到执行上下文栈。</p></li><li><p>是否能有属性：</p><p>  引用值的属性是可以随意添加、修改和删除的，称为动态属性（4.1.1 动态属性）。原始值是没有属性的，尽管我们给原始值添加属性也不会报错。</p><p>  不报错的原因：</p><p>  原始类型的初始化除了使用原始字面量的方式，还可以使用 <code>new</code> 运算符，比如声明一个字符串类型的数据：</p>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用字面量</span></span><br><span class="line"><span class="keyword">var</span> name1 = <span class="string">&#x27;li&#x27;</span></span><br><span class="line"><span class="comment">// 使用 new 运算符</span></span><br><span class="line"><span class="keyword">var</span> name2 = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;li&#x27;</span>)</span><br></pre></td></tr></table></figure><p>  这两种方式生成的值在使用时没什么区别，但使用 <code>new</code> 时，相当于生成了一个对象，对象是可以添加属性的。当我们给使用字面量初始化的 <code>name1</code> 添加属性时，JS 引擎会隐式地将 name1 也转换成一个 String 对象，所以添加属性也不会报错。</p></li><li><p>复制方式不同：（4.1.2 复制值）</p><p>  在通过变量复制值的时候的表现会不同。如果变量指向原始值，会直接完全克隆一份新的值，新的变量指向新的值。如果变量指向引用值，则是复制引用值的地址，新旧两个变量最终指向的还是同一个存储在堆内存中的对象。如下图，最终导致，当我们操作 <code>obj</code> 和 <code>obj2</code> 时，其实都是操作的同一个对象，修改 <code>obj1</code> 变量，其实 <code>obj2</code> 也会变。</p><p>  <img src="/images/scope-execution-context/1.png" alt="Untitled"></p><p>  <img src="/images/scope-execution-context/2.png" alt="Untitled"></p><p>  由于在复制值的时候，不太一样。也导致在传递函数参数时（4.1.3 传递参数），表现会有所不同。传递函数参数本质上就是在函数内部新增一个内部属性复制外部的值到内部，如果参数是引用值，仅仅复制的是地址，还是指向同一个对象，所以在函数内部修改传入的引用值，外部的引用值也会发生改变。</p>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">setName</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&quot;Nicholas&quot;</span>;</span><br><span class="line"><span class="comment">// 传入 person 时，相当于 </span></span><br><span class="line"><span class="comment">// var obj = person</span></span><br><span class="line"><span class="comment">// obj.name = &quot;Nicholas&quot;;</span></span><br><span class="line"><span class="comment">// obj 和 person 其实指向同一个对象</span></span><br><span class="line"><span class="comment">// 所以 person.name === &quot;Nicholas&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"><span class="title function_">setName</span>(person);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>); <span class="comment">// &quot;Nicholas&quot;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="现在我们充分了解了这两种类型的区别。JS-引擎会识别值的类型，将它们存储在内存中不同的地方，并通过“执行上下文”来管理这些值的“作用域”和生命周期。这是运行-JS-代码的基础。（4-2-执行上下文和作用域）"><a href="#现在我们充分了解了这两种类型的区别。JS-引擎会识别值的类型，将它们存储在内存中不同的地方，并通过“执行上下文”来管理这些值的“作用域”和生命周期。这是运行-JS-代码的基础。（4-2-执行上下文和作用域）" class="headerlink" title="现在我们充分了解了这两种类型的区别。JS 引擎会识别值的类型，将它们存储在内存中不同的地方，并通过“执行上下文”来管理这些值的“作用域”和生命周期。这是运行 JS 代码的基础。（4.2 执行上下文和作用域）"></a>现在我们充分了解了这两种类型的区别。JS 引擎会识别值的类型，将它们存储在内存中不同的地方，并通过“执行上下文”来管理这些值的“作用域”和生命周期。这是运行 JS 代码的基础。（4.2 执行上下文和作用域）</h3><p>🏷️ 执行上下文</p><blockquote><p>当一段 JavaScript 代码在运行的时候，它实际上是运行在<strong>执行上下文</strong>中。下面 3 种类型的代码会创建一个新的执行上下文：</p><ul><li>全局上下文是为运行代码主体而创建的执行上下文，也就是说，它是为那些存在于 JavaScript 函数之外的任何代码而创建的。</li><li>每个函数会在执行的时候创建自己的执行上下文。这个上下文就是通常说的“本地上下文”。</li><li>使用 <code>[eval()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/eval)</code> 函数也会创建一个新的执行上下文。</li></ul><p>每个上下文创建的时候会被推入<strong>执行上下文栈</strong>。当退出的时候，它会从上下文栈中移除。<br>—MDN</p></blockquote><p>我们来看个具体的例子。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sayHello</span>(<span class="params">number</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> defaultName = <span class="string">&#x27;nobody&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params">number</span>) &#123;</span><br><span class="line"><span class="keyword">switch</span> (number): &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>: </span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;world&#x27;</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;China&#x27;</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;ShanDong&#x27;</span></span><br><span class="line"><span class="attr">default</span>:</span><br><span class="line"><span class="keyword">return</span> defaultName</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> name = <span class="title function_">getName</span>(number)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`hello <span class="subst">$&#123;name&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">sayHello</span>(<span class="number">1</span>) <span class="comment">// hello world</span></span><br></pre></td></tr></table></figure><p>在执行 <code>sayHello(1)</code> 的时候，首先会创建一个全局上下文，然后遇见函数创建函数上下文，函数执行结束时，弹出该执行上下文。</p><p>当执行到 <code>switch(number)</code> 这行时，上下文栈如下：</p><p><img src="/images/scope-execution-context/3.png" alt="Untitled"></p><p>当执行到 <code>console.log(</code>hello ${name}<code>)</code> 时，上下文栈如下：</p><p><img src="/images/scope-execution-context/4.png" alt="Untitled"></p><p>🏷️ 变量对象 &amp; 词法环境</p><blockquote><p>变量或函数的上下文决定了它们可以访问哪些数据，以及它们的行为。每个上下文都有一个关联的变量对象（ variable object），而这个上下文中定义的所有变量和函数都存在于这个对象上。</p></blockquote><p>实际上，这里说的“所有变量和函数都存在于这个对象上”不是很准确，准确来说是，使用 <code>var</code> 和 <code>function</code> 声明的变量属于变量对象，而 <code>let</code> 和 <code>const</code> 等属于词法环境对象。</p><blockquote><p>如果代码正在执行的上下文是函数上下文，则其活动对象（ activation object）用作变量对象，活动对象最初只有一个定义变量： arguments。</p></blockquote><p>基于上面定义，当执行到 <code>switch(number)</code> 这行时，会有：</p><p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/f0abc7ea-df17-418d-9303-c09de0c55ffe/de7e31c6-ee24-4391-a515-0f8a29a67c04/Untitled.png" alt="执行到 `switch(number)` 时的执行上下文栈"></p><p>其中 <code>arguments</code> 即包含 <code>number</code>。</p><p>当执行到 <code>console.log(</code>hello ${name}<code>)</code> 时，上下文栈如下：</p><p><img src="/images/scope-execution-context/5.png" alt="执行到 `console.log(`hello ${name}`)` 时的执行上下文栈"></p><p>🏷️ 作用域 &amp; 作用域链 &amp; 作用域链增强</p><p>变量的可见区域我们就称为作用域。（作用域，可以作用到的范围，即可以被访问的范围）。一般来说，一个执行上下文会形成一个作用域层级。也就是说在一个执行上下文中执行代码时，该执行上下文中声明的变量是可以被访问到的。</p><p>所以，由执行到 <code>switch(number)</code> 时的执行上下文（图见上文），我们可以得知，在 <code>getName</code> 上下文中，我们现在只能访问到 <code>arguments</code> 对象中的 <code>number</code> ，那为什么我们还能访问到 <code>name</code> 呢？</p><p>这是因为执行上下文中除了变量对象、词法环境，还有个作用域链。作用域链，顾名思义，是作用域的一个链条。最前端是当前的执行上下文的作用域，然后顺着执行上下文栈往下，依次串联每个执行上下文，直到全局上下文。当我们访问一个变量时，如果当前执行上下文没有，我们会顺着这个作用域链找，直到找到。</p><p>某些语句会导致在作用域链前端临时添加一个上下文，这个上下文在代码执行后会被删除，我们称为作用域链增强。（4.2.1 作用域链增强）</p><blockquote><p>通常在两种情况下会出现这个现象，即代码执行到下面任意一种情况时：</p><ul><li>try/catch 语句的 <code>catch</code> 块</li><li><code>with</code> 语句</li></ul></blockquote><p>全局执行上下文对应的是全局作用域。函数执行上下文对应的称为函数作用域。除了执行上下文对应的作用域层级外，在 ES6 后，JS 中还增加了块级作用域。一般情况下，编程语言的块级作用域形成方式是使用大括号进行包裹：<code>&#123;  /** some expression **/ &#125;</code> ，常用的就是 <code>for</code> 和 <code>if</code> 等条件语句。但 JS 在 ES6 之前是不支持的。原因在于之前 JS 中声明变量的两种方式，<code>var</code> 和 <code>function</code> 不能识别到 <code>&#123;&#125;</code> 。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="string">&#x27;a&#x27;</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">b</span> () &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b) <span class="comment">// a function b() &#123;&#125;</span></span><br></pre></td></tr></table></figure><p>没有块级作用域会造成一些问题，最经典问题如下：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>所以，JS 引入了 <code>let</code> 和 <code>const</code> ，它们声明的变量能识别到 <code>&#123;&#125;</code>，并遵循块级作用域，也就是只能在  <code>&#123;&#125;</code> 内部访问。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="string">&#x27;a&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> b = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b) <span class="comment">// Uncaught ReferenceError: a is not defined</span></span><br></pre></td></tr></table></figure><p>但是我们知道 <code>let</code> 、<code>const</code> 和 <code>var</code> 的差别还不止这些。看下面代码：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">&#x27;a&#x27;</span></span><br></pre></td></tr></table></figure><p><code>var</code> 和 <code>function</code> 被设计成即使在声明前访问也不会报错，也就是所谓的“变量提升”现象(4.2.2 变量声明）。其底层实现在于，JS 在实际执行前，会提前识别到执行上下文中的变量（术语叫词法分析），所以即使在声明变量之前就使用，也不会报错。</p><p>但是下面这段代码就会报错：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b) <span class="comment">// Uncaught ReferenceError: b is not defined</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="string">&#x27;b&#x27;</span></span><br></pre></td></tr></table></figure><p>这是因为， <code>let</code> 和 <code>const</code> 关键字声明的变量又增加了一个新的限制，叫”暂时性死区“，也就是虽然在执行前还是能识别到变量，但是此时并不能访问。</p><p>回归正题，增加了块级作用域后，当我们再访问一个变量时，查找顺序就变成了，块级作用域-函数作用域-作用域链。</p><h3 id="讲完数据在-JS-中是如何被识别和使用的，有没有发现，在写-JS-代码的时候，我们是不需要关注数据的清除的，这是因为-JS-引擎同样会帮我们进行内存管理。它的垃圾回收机制会定期检查这些值，当没有变量引用它们时，会将其标记为垃圾并释放其占用的内存。（4-3-垃圾回收）"><a href="#讲完数据在-JS-中是如何被识别和使用的，有没有发现，在写-JS-代码的时候，我们是不需要关注数据的清除的，这是因为-JS-引擎同样会帮我们进行内存管理。它的垃圾回收机制会定期检查这些值，当没有变量引用它们时，会将其标记为垃圾并释放其占用的内存。（4-3-垃圾回收）" class="headerlink" title="讲完数据在 JS 中是如何被识别和使用的，有没有发现，在写 JS 代码的时候，我们是不需要关注数据的清除的，这是因为 JS 引擎同样会帮我们进行内存管理。它的垃圾回收机制会定期检查这些值，当没有变量引用它们时，会将其标记为垃圾并释放其占用的内存。（4.3 垃圾回收）"></a>讲完数据在 JS 中是如何被识别和使用的，有没有发现，在写 JS 代码的时候，我们是不需要关注数据的清除的，这是因为 JS 引擎同样会帮我们进行内存管理。它的垃圾回收机制会定期检查这些值，当没有变量引用它们时，会将其标记为垃圾并释放其占用的内存。（4.3 垃圾回收）</h3><p>红宝书用 7 页的篇幅讲了 JS 的垃圾回收机制。JS 是使用垃圾回收的语言，也就是引擎会帮助我们做内存管理，开发者其实不需要过多介入。不追求性能的时候，一般需要注意以下几点就行：</p><p>一方面，我们尽量手动回收一些数据，避免内存泄漏。比如，警惕一直存在的全局变量和不需要的定时器函数，使用完要主动清除掉。</p><p>另一方面，还需要注意代码的写法以降低垃圾回收的频率。比如，减少类实例属性的增加和删除，而是初始化全部属性，不使用的时候赋值为 <code>null</code> 。</p><p>下面，还是介绍下这 7 页纸，总得来说分为两部分。</p><ul><li>垃圾回收的策略。</li><li>垃圾回收对性能的影响，以及如何进行合适的内存管理降低影响。</li></ul><p>🏷️ 垃圾回收策略 (4.3.1和4.3.2）</p><p>前面我们也提到，JS 中的数据大致可以分为两类——原始类型和引用类型，两者存储的内存空间不同。原始类型的数据存储在在栈中，其实也就是其所属的执行上下文中，当执行上下文执行结束并弹出栈的时候，其中原始类型的数据就会同步销毁。所以，我们下面所说的垃圾回收一般是指引用类型数据的回收，也就是堆内存中数据的回收。</p><p>垃圾回收的策略有两种，标记清理和引用计数。目前我们常用的浏览器均使用标记清理及其变体。</p><p>我们先看下标记清理。标记清理分为两步，标记-清除。垃圾回收机制会识别哪些变量在执行上下文中，或者被执行上下文中的变量引用，这些就是还在活跃的数据，不能被清除。剩下的就是垃圾数据，标记它们，然后做一次内存管理，销毁它们。</p><p>引用计数是指对每个值都记录其被引用的次数，当次数为 0 时就可被销毁。引用计数存在循环引用的问题，不被广泛使用。</p><p>🏷️ 垃圾回收对性能的影响，如何进行内存管理降低影响</p><p>（4.3.3和4.3.4）</p><p>我们都知道，JavaScript 是单线程语言，执行 JS 代码、渲染页面甚至垃圾回收都在同一个线程中执行，如果频繁地执行垃圾回收可能会影响其他任务的正常运行。</p><p>所以，执行垃圾回收的时机就很重要。</p><blockquote><p>现代垃圾回收程序一般是根据已分配对象的大小和数量来判断来决定何时运行垃圾回收。</p></blockquote><p>我们常用的现代浏览器都对这些算法做了尽可能地优化，一般不需要开发者关心。但由于 JS 运行在浏览器中，通常浏览器被分配到的运行内存不是很多，将内存占用量保持在一个较小的值可以让页面性能更好。因此，我们也需要通过一些小手段来帮助 JS 引擎更好地管理内存。</p><blockquote><p>优化内存占用的最佳手段就是保证在执行代码时只保存必要的数据。如果数据不再必要，那么把它设置为 null，从而释放其引用。这也可以叫作解除引用。这个建议最适合全局变量和全局对象的属性。</p></blockquote><p>另外还有一些其他方式：</p><ol><li>多使用 <code>let</code> 和 <code>const</code> ，因为它们是块作用域，相比较使用 <code>var</code> ，垃圾回收机制能更早地介入。</li><li>注意不要破坏 V8 提供的“隐藏类”优化策略。 V8 引擎会将创建的对象和隐藏类关联起来，能够共享相同隐藏类的对象 V8 会进行优化，性能更好。 <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Article</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">title</span> = <span class="string">&#x27;Inauguration Ceremony Features Kazoo Band&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> a1 = <span class="keyword">new</span> <span class="title class_">Article</span>();</span><br><span class="line"><span class="keyword">let</span> a2 = <span class="keyword">new</span> <span class="title class_">Article</span>();</span><br></pre></td></tr></table></figure> 如上，V8 会在后台配置，让这两个类实例 <code>a1</code> 或 <code>a2</code>共享相同的隐藏类，因为这两个实例共享同一个构造函数和原型。但是，如果给对象 <code>a1</code> 或 <code>a2</code> 增加或删除属性，都会导致创建新的隐藏类而不再是共享。 解决方案就是尽量在类中一次性声明所有属性，如果不使用该属性，可以将其设置为 <code>null</code> 。</li><li>避免意外的内存泄漏 书中说到的泄漏内存的可能点：<ul><li>意外创建全局变量  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&#x27;a&#x27;</span></span><br></pre></td></tr></table></figure></li><li>使用闭包的时候  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">        </span><br></pre></td></tr></table></figure></li><li>定时器里的变量（也算是闭包的一种）  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;Jake&#x27;</span>;</span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line">&#125;, <span class="number">100</span>);</span><br></pre></td></tr></table></figure></li></ul> 但说实话，在实际场景中，我们会时常用到闭包的这个特性来创建私有变量等。所以如果不是意外产生的内存泄漏，不必介意。</li><li>使用静态分配和对象池 静态分配对应的是 JS 的特性-对象属性和数组长度可以在使用过程中进行动态调整，不像一些其他语言那样，在声明的时候就得定好长度。但是 JS 实现这个动态分配也会产生性能问题，比如原来长度为 100 的数组，如果添加一个项目，JS 需要开辟另外一块大于 101 的内存空间，再把这 101 个项目复制过来。所以，我们在使用数组的时候，最好提前设置长度或者尽量不增加。 同样的，对象也有这么</li></ol><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>本章主要是讲解与 JS 运行时相关的概念。但在顺序安排上，其实，原始值和引用值的处理和执行上下文、作用域的概念没什么必要关联。执行上下文和作用域是不管值的类型的，只在意变量名称。所以，是不是这样比较好，先讲执行上下文，再说值的类型，再说垃圾回收。</p>]]></content>
      
      
      <categories>
          
          <category> 《都 4202 年了，我还在读红宝书！》 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对象中属性命名方式转换（下划线-驼峰式互相转换）</title>
      <link href="/2023/03/19/naming-rule-transform/"/>
      <url>/2023/03/19/naming-rule-transform/</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对象 key 命名方式转换</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">type</span> - 转换类型 &#x27;toUnderScore&#x27;: from camel to underScore; &#x27;toCamel&#x27;: from underscore to camel</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">NamingRuleType</span> = &#123;</span><br><span class="line">  <span class="attr">toUnderScore</span>: <span class="string">&#x27;toUnderScore&#x27;</span>,</span><br><span class="line">  <span class="attr">toCamel</span>: <span class="string">&#x27;toCamel&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">transformNamingRule</span> = (<span class="params">data, type = <span class="string">&#x27;toUnderScore&#x27;</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> data !== <span class="string">&#x27;object&#x27;</span> || data === <span class="literal">null</span>) <span class="keyword">return</span> data</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(data)) &#123;</span><br><span class="line">    <span class="keyword">return</span> data.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="title function_">transformNamingRule</span>(item, type))</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">keys</span>(data).<span class="title function_">reduce</span>(<span class="function">(<span class="params">formatedData, key</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> formatedKey =</span><br><span class="line">        type === <span class="title class_">NamingRuleType</span>.<span class="property">toUnderScore</span></span><br><span class="line">          ? key.<span class="title function_">replace</span>(<span class="regexp">/([A-Z])/g</span>, <span class="function"><span class="params">match</span> =&gt;</span> <span class="string">&#x27;_&#x27;</span> + match.<span class="title function_">toLowerCase</span>())</span><br><span class="line">          : key.<span class="title function_">replace</span>(<span class="regexp">/_([a-z])/g</span>, <span class="function"><span class="params">match</span> =&gt;</span></span><br><span class="line">              match.<span class="title function_">replace</span>(<span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27;&#x27;</span>).<span class="title function_">toUpperCase</span>()</span><br><span class="line">            )</span><br><span class="line">      formatedData[formatedKey] = <span class="title function_">transformNamingRule</span>(data[key], type)</span><br><span class="line">      <span class="keyword">return</span> formatedData</span><br><span class="line">    &#125;, &#123;&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将驼峰式命名改为下划线命名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">transformCamelToUnderScore</span> = data =&gt;</span><br><span class="line">  <span class="title function_">transformNamingRule</span>(data, <span class="title class_">NamingRuleType</span>.<span class="property">toUnderScore</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将下划线命名改为驼峰式命名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">transformUnderScoreToCamel</span> = data =&gt;</span><br><span class="line">  <span class="title function_">transformNamingRule</span>(data, <span class="title class_">NamingRuleType</span>.<span class="property">toCamel</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Snippet </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React 项目中使用图标</title>
      <link href="/2023/03/16/icon-in-react/"/>
      <url>/2023/03/16/icon-in-react/</url>
      
        <content type="html"><![CDATA[<p>除了 iconfont 格式和 svg 格式，之前常用的有 image sprite，但因为图片生成和维护困难等原因，现在用得不多。</p><h2 id="使用-iconfont-格式"><a href="#使用-iconfont-格式" class="headerlink" title="使用 iconfont 格式"></a>使用 iconfont 格式</h2><p>做法就是下载 font 文件，添加到 public 文件夹，在 index.html 页面引入字体文件。然后就可以在使用时作为 class 使用。</p><p>比如，如果使用阿里图标库：</p><ol><li>下载文件去阿里图标库官网（<a href="https://www.iconfont.cn/%EF%BC%89">https://www.iconfont.cn/）</a>，选择想要的图标添加至购物车，点击购物车里的添加到项目，项目中点击下载到本地，会有一个 font 文件夹。</li><li>在项目中引入文件。将文件夹放到 public 中，并在 index.html 的 head 中加上 <code>&lt;link rel=&quot;stylesheet&quot; href=&quot;./font/iconfont.css&quot;&gt;</code> 。</li><li>使用。直接写 <code>&lt;i className=&quot;iconfont icon-all&quot;&gt;&lt;/i&gt;</code> 或 <code>&lt;i class=&quot;iconfont icon-all&quot;&gt;&lt;/i&gt;</code> 。</li></ol><p>引入的图标遵循模块化。</p><h2 id="使用-svg-格式"><a href="#使用-svg-格式" class="headerlink" title="使用 svg 格式"></a>使用 svg 格式</h2><p>SVG 是一种基于 XML 语法的图像格式，全称是可缩放矢量图（Scalable Vector Graphics）。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  test<span class="punctuation">:</span> /\.svg$/<span class="punctuation">,</span></span><br><span class="line">  use<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span>loader<span class="punctuation">:</span> &#x27;svg-sprite-loader&#x27;<span class="punctuation">,</span> options<span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      loader<span class="punctuation">:</span> &#x27;svgo-loader&#x27;<span class="punctuation">,</span> options<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        plugins<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">&#123;</span>removeAttrs<span class="punctuation">:</span> <span class="punctuation">&#123;</span>attrs<span class="punctuation">:</span> &#x27;fill&#x27;<span class="punctuation">&#125;</span><span class="punctuation">&#125;</span> <span class="comment">// 意思是移除 fill 属性</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="方式一-当作一个组件直接复制在-JSX-中"><a href="#方式一-当作一个组件直接复制在-JSX-中" class="headerlink" title="方式一 当作一个组件直接复制在 JSX 中"></a>方式一 当作一个组件直接复制在 JSX 中</h3><p>或者觉得直接添加代码太多有点丑陋，可以封装成一个组件。</p><h3 id="方式二-use-标签"><a href="#方式二-use-标签" class="headerlink" title="方式二 use 标签"></a>方式二 use 标签</h3><p>svg 文件单独存放，使用 <code>use</code> 标签 + <code>symbol</code> 的 <code>id</code> 属性。</p><p>比如，文件如下：test.svg</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg xmlns=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">xmlns</span>:xlink=<span class="string">&quot;http://www.w3.org/1999/xlink&quot;</span> style=<span class="string">&quot;position: absolute; width: 0; height: 0&quot;</span> id=<span class="string">&quot;__SVG_SPRITE_NODE__&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;bank&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">xmlns:xlink</span>=<span class="string">&quot;http://www.w3.org/1999/xlink&quot;</span> <span class="attr">class</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">defs</span>&gt;</span><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">defs</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">rect</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">style</span>=<span class="string">&quot;fill:rgb(153, 238, 172);stroke-width:2;stroke:rgb(0,0,0)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">rect</span>&gt;</span>    </span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">symbol</span>&gt;</span></span></span><br><span class="line">&lt;/svg&gt;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;./test.svg&#x27;</span>)</span><br><span class="line"></span><br><span class="line">&lt;svg&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">use</span> <span class="attr">xlink:href</span>=<span class="string">&quot;#bank&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">use</span>&gt;</span></span></span><br><span class="line">&lt;/svg&gt;</span><br></pre></td></tr></table></figure><p><code>symbol</code> 中的 <code>id</code> 和 <code>use</code> 中的 <code>href</code> 要对应才行。此处使用 <code>require</code>，可以避免 TreeShaking。</p><p>在 CRA 项目中使用 svg，可以借助插件 svg-sprite-loader 更好地组织 svg 文件。同时可能还需要使用 svgo-loader 用来处理一些修改 svg 时会报错的问题的，比如，有些 svg 自身含有 fill 属性，我们后期给它添加颜色会失败。</p><p>配置如下：webpack.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.svg$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&quot;svg-sprite-loader&quot;</span>,</span><br><span class="line">            <span class="attr">include</span>: [<span class="title function_">resolve</span>(<span class="string">&quot;src/icons&quot;</span>)],</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">              <span class="attr">symbolId</span>: <span class="string">&quot;icon-[name]&quot;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(png|jpe?g|gif|svg)(\?.*)?$/</span>,</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&quot;url-loader&quot;</span>,</span><br><span class="line">        <span class="comment">// 排除字体图标文件</span></span><br><span class="line">        <span class="attr">exclude</span>: [path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../src/icons/svg&quot;</span>)],</span><br><span class="line">        <span class="attr">options</span>: &#123;</span><br><span class="line">          <span class="attr">limit</span>: <span class="number">10000</span>,</span><br><span class="line">          <span class="attr">name</span>: utils.<span class="title function_">assetsPath</span>(<span class="string">&quot;img/[name].[hash:7].[ext]&quot;</span>),</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果你用的 craco，配置如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">webpack</span>: &#123;</span><br><span class="line">  <span class="attr">configure</span>: <span class="function">(<span class="params">webpackConfig, &#123; env, paths &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    webpackConfig.<span class="property">module</span>.<span class="property">rules</span>[<span class="number">1</span>].<span class="property">oneOf</span> = [</span><br><span class="line">      ...[</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">test</span>: <span class="regexp">/\.svg$/</span>,</span><br><span class="line">          <span class="attr">include</span>: [<span class="title function_">pathResolve</span>(<span class="string">&quot;src/icons&quot;</span>)],</span><br><span class="line">          <span class="attr">use</span>: [</span><br><span class="line">            &#123; <span class="attr">loader</span>: <span class="string">&quot;svg-sprite-loader&quot;</span>, <span class="attr">options</span>: &#123;&#125; &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">loader</span>: <span class="string">&quot;svgo-loader&quot;</span>,</span><br><span class="line">              <span class="attr">options</span>: &#123;</span><br><span class="line">                <span class="attr">plugins</span>: [</span><br><span class="line">                  <span class="comment">// 插件名字必须加</span></span><br><span class="line">                  &#123;</span><br><span class="line">                    <span class="attr">name</span>: <span class="string">&quot;removeAttrs&quot;</span>,</span><br><span class="line">                    <span class="attr">params</span>: &#123;</span><br><span class="line">                      <span class="attr">attrs</span>: <span class="string">&quot;(fill|stroke)&quot;</span>,</span><br><span class="line">                    &#125;,</span><br><span class="line">                  &#125;,</span><br><span class="line">                ],</span><br><span class="line">              &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">          ],</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">      ...webpackConfig.<span class="property">module</span>.<span class="property">rules</span>[<span class="number">1</span>].<span class="property">oneOf</span>,</span><br><span class="line">    ];</span><br><span class="line">    <span class="keyword">return</span> webpackConfig;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该插件会使得所有的 icon 文件形成如下这样，也就是 svg sprite。<code>symbol</code> 的 <code>id</code> 如果不特别指定，就是你的文件名，在上述配置中我们指定了 <code>symbolId</code> 为 <code>icon-[name]</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">xmlns:xlink</span>=<span class="string">&quot;http://www.w3.org/1999/xlink&quot;</span> <span class="attr">id</span>=<span class="string">&quot;__SVG_SPRITE_NODE__&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">symbol</span> <span class="attr">class</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span> <span class="attr">id</span>=<span class="string">&quot;icon名&quot;</span>&gt;</span>&#123;&#123;省略的icon path&#125;&#125;<span class="tag">&lt;/<span class="name">symbol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">symbol</span> <span class="attr">class</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span> <span class="attr">id</span>=<span class="string">&quot;icon名&quot;</span>&gt;</span>&#123;&#123;省略的icon path&#125;&#125;<span class="tag">&lt;/<span class="name">symbol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在使用的时候，</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;icons/money.svg&#x27;</span></span><br><span class="line"></span><br><span class="line">&lt;svg className=&#123;<span class="string">&quot;icon&quot;</span>&#125;&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">use</span> <span class="attr">xlinkHref</span>=<span class="string">&quot;#money&quot;</span>/&gt;</span></span></span><br><span class="line">&lt;/svg&gt;</span><br></pre></td></tr></table></figure><p><code>import xxx from</code>  需要是导出作为模块，但是 svg 没有 export default 导出就会报错。所以直接 <code>import &#39;icons/money.svg&#39;</code></p><p>可以看到，我们只能每次使用时引入文件。有没有傻瓜式批量引入的方式呢？</p><p>全部一次性引入，然后封装一个 Icon，傻瓜式使用。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">importAll</span> = requireContext =&gt; requireContext.<span class="title function_">keys</span>().<span class="title function_">forEach</span>(requireContext);</span><br><span class="line"><span class="keyword">try</span> &#123; </span><br><span class="line">  importAll(<span class="built_in">require</span>.<span class="title function_">context</span>(<span class="string">&#x27;icons&#x27;</span>, <span class="literal">true</span>, <span class="regexp">/\.svg$/</span>)); </span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Icon</span> = props =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;name, ...rest&#125; = props;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">svg</span> &#123;<span class="attr">...rest</span>&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;name &amp;&amp; <span class="tag">&lt;<span class="name">use</span> <span class="attr">xlinkHref</span>=<span class="string">&#123;</span>&#x27;#&#x27; + <span class="attr">props.name</span>&#125; /&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Icon</span>;</span><br></pre></td></tr></table></figure><p><code>require.context</code> 是 webpack 提供的。</p><p>此时，就可如下使用： </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import Icon from &#x27;./Icon&#x27;;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Icon</span> <span class="attr">name</span>=<span class="string">&quot;tag&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>我们可能还需要使用 svgo-loader。后者是用来处理一些修改 svg 时会报错的问题的，比如，有些 svg 自身含有 fill 属性，我们后期给它添加颜色会失败。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">test</span>: <span class="regexp">/\.svg$/</span>,</span><br><span class="line">  <span class="attr">use</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">loader</span>: <span class="string">&#x27;svgo-loader&#x27;</span>, <span class="attr">options</span>: &#123;</span><br><span class="line">        <span class="attr">plugins</span>: [</span><br><span class="line">          &#123;<span class="attr">removeAttrs</span>: &#123;<span class="attr">attrs</span>: <span class="string">&#x27;fill&#x27;</span>&#125;&#125; <span class="comment">// 意思是移除 fill 属性</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方式三-使用插件-react-svg-传入路径即可使用"><a href="#方式三-使用插件-react-svg-传入路径即可使用" class="headerlink" title="方式三 使用插件 react-svg 传入路径即可使用"></a>方式三 使用插件 react-svg 传入路径即可使用</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import ReactSVG from &#x27;react-svg&#x27;</span><br><span class="line"></span><br><span class="line">return <span class="tag">&lt;<span class="name">ReactSVG</span> <span class="attr">src</span>=<span class="string">&quot;react.svg&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>参考：<a href="https://juejin.cn/post/6941265977485033486">React项目使用SVG</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Solution </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>白话 JS 中的类</title>
      <link href="/2023/03/13/class-in-js/"/>
      <url>/2023/03/13/class-in-js/</url>
      
        <content type="html"><![CDATA[<p>来看一个简单的类</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">sayName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相当于</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">Foo</span> = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">Bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">constructor</span> = <span class="title class_">Bar</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title class_">Bar</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Bar</span></span><br><span class="line">&#125;)()</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">FooFunc</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">FooFunc</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;</span><br></pre></td></tr></table></figure><p>所以，如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="title class_">Foo</span>) <span class="comment">// function</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Point</span> === <span class="title class_">Point</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>类和函数都有一些共同的特征，因为可以从上面看到，foo 本质上还是个函数。</p><ol><li> 是一等公民，可以作为参数传递。</li><li> 类可以被实例化（使用 new 调用）。</li><li> 可以在定义的时候立刻实例化。</li></ol><p>但是，class 这个关键字，对函数进行了一些限制。</p><ol><li> 不可以提升。</li><li> 类是受块级作用域限制（和上一条是同一个原因，不可提升是为了弥补一些可提升的问题，所以在执行上下文中另开辟了一个地方，词法环境来放置。）</li><li> 只能使用 new 调用。</li></ol><p>还有，我们可以看到，类中只能定义构造器函数和一般函数。<br>根据这些，我自己写了个模拟 class 关键字的函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createClass</span>(<span class="params">className, constructor, ...funcs</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> F = <span class="keyword">function</span> [className](...args) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span> === globalThis) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;class constructor Animal cannot be invoked without &#x27;new&#x27;&quot;</span>)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    constructor.<span class="title function_">call</span>(<span class="variable language_">this</span>, ...args)</span><br><span class="line">  &#125;</span><br><span class="line">  F.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = F</span><br><span class="line">  funcs.<span class="title function_">forEach</span>(<span class="function"><span class="params">func</span> =&gt;</span> &#123;</span><br><span class="line">    F.<span class="property"><span class="keyword">prototype</span></span>[func.<span class="property">name</span>] = func</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> F</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> constructor = <span class="keyword">function</span> (<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> funcA = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Foo</span> = <span class="title function_">createClass</span>(<span class="string">&#x27;Bar&#x27;</span>, constructor, funcA) <span class="comment">// 相当于 let Foo = class Bar &#123; ... &#125;</span></span><br><span class="line"><span class="keyword">let</span> foo = <span class="keyword">new</span> <span class="title class_">Foo</span>(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line">foo.<span class="title function_">funcA</span>() <span class="comment">// li</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo <span class="keyword">instanceof</span> <span class="title class_">Foo</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Foo</span> === <span class="title class_">Foo</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="title class_">Foo</span>) <span class="comment">// function</span></span><br><span class="line"><span class="keyword">let</span> fooB = <span class="title class_">Foo</span>(<span class="string">&#x27;li&#x27;</span>) <span class="comment">// class constructor Animal cannot be invoked without &#x27;new&#x27;</span></span><br><span class="line"><span class="keyword">let</span> bar = <span class="keyword">new</span> <span class="title class_">Bar</span>() <span class="comment">// Bar is not defined</span></span><br></pre></td></tr></table></figure><p>测试来看，和类的表现一致。<br>根据这个很通俗的产生类的代码，可以很清楚地看到以下几点。</p><ol><li> constructor 函数里的属性和方法是父函数上的，会为其实例进行属性赋值。</li><li> 类里直接定义的属性和方法是父函数原型上的。</li><li> 我们还可以直接给类直接定义属性和方法。因为类本质上是函数，JS 中函数又是对象，而只要是对象，就可以添加属性。比如，Foo.ownProp = ‘foo’ 这个 ownProp 属性只能使用 Foo.ownProp 调用。这种属性和方法我们称为“静态类成员”，对于这类方法，ES6 还提供了一个关键字<code>static</code>来表示。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">sayName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>) <span class="comment">// this 指向 Person 本身</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property">name</span> = <span class="string">&#x27;jiang&#x27;</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="title function_">sayName</span>() <span class="comment">// &#x27;jiang&#x27;</span></span><br></pre></td></tr></table></figure><p>为了“充分模仿”其他函数的类，ES6 还提供了其他一些其他语法糖。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class Person &#123;</span><br><span class="line">  // 读写属性（或者模拟内部属性，即不可对外可见的属性 age_）</span><br><span class="line">  get age() &#123;</span><br><span class="line">    console.log(this.age_)</span><br><span class="line">  &#125;</span><br><span class="line">  set age(val) &#123;</span><br><span class="line">    this.age_ = val + 1</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开始到了继承阶段。ES6 提供了一个关键字 extends 来模拟，使用如下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Parent</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>extends，其实相当于寄生式组合继承 + Object.setPrototypeOf(Child, Parent)。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title class_">Parent</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Child._proto_ = Parent</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">setPrototypeOf</span>(<span class="title class_">Child</span>, <span class="title class_">Parent</span>)</span><br><span class="line"><span class="comment">// Child.prototype._proto_ = Parent.prototype</span></span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(</span><br><span class="line">  <span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>,</span><br><span class="line">  (<span class="attr">constructor</span>: &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="title class_">Child</span></span><br><span class="line">  &#125;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>这两步实现了：派生类可以通过原型链访问到类和原型上的方法。也就是，相当于复制了一份类。包括静态方法，原型方法，属性赋值之类的。</p>]]></content>
      
      
      <categories>
          
          <category> 《都 4202 年了，我还在读红宝书！》 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>白话 JS 中的继承</title>
      <link href="/2023/03/13/inherit-in-js/"/>
      <url>/2023/03/13/inherit-in-js/</url>
      
        <content type="html"><![CDATA[<p>本文是在复习《JavaScript 高级程序设计》中的继承那章后，整合思路的总结。特意使用流水线不分目录的叙述方式，方便更好地串起知识点。出现 🏷️ 表示神经需要转向新的地方了。</p><p>🏷️ 继承，就是 A 的属性方法可以继承给 B，B 可以继续往下传。 同时，我们还希望</p><ul><li>B 能够新增自己的属性和方法。</li><li>B 能够修改继承来的属性和方法，但不影响 A 也不干扰同代。</li></ul><p>通过继承创建的新类称为“子类”或“派生类”，被继承的类称为“基类”、“父类”或“超类”。</p><p>要实现继承，可以通过“继承”（Inheritance）和“组合”（Composition）来实现。</p><p>🏷️ 那，JS 中怎么实现继承呢。</p><p>JS 中有原型。我们先来看看原型是啥。</p><ul><li>每个<strong>函数对象</strong>默认有一个属性 <strong><code>prototype</code><strong>，它指向该函数对象的</strong>原型对象</strong>。</li><li>使用 <code>new</code>运算符调用函数时，会产生一个新对象，新对象默认有一个内部属性原型**<code>[[Prototype]]</code>**，它指向的就是函数的原型对象。（至于 <code>new</code> 的实现原理，在此先不表）</li><li>原型上的属性是能够被新对象共享的。</li></ul><p>我们来看一个简单的例子。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> O = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;li&#x27;</span>,</span><br><span class="line">  <span class="attr">colors</span>: [<span class="string">&#x27;red&#x27;</span>],</span><br><span class="line">  <span class="attr">sayName</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">F</span> () &#123; &#125;</span><br><span class="line">F.<span class="property"><span class="keyword">prototype</span></span> = O</span><br><span class="line"><span class="keyword">let</span> foo = <span class="keyword">new</span> <span class="title function_">F</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="property">name</span>) <span class="comment">// li</span></span><br><span class="line">foo.<span class="title function_">sayName</span>() <span class="comment">// li</span></span><br></pre></td></tr></table></figure><p>如上，当执行 <code>foo.name</code> 时，会先检查 foo 本身是否有这个属性，如果没有就会查看其原型上是否有该属性，如果有就返回，如果没有就继续搜寻原型的原型上是否有。在本例中，也就是可以使用 foo 调用 O 的属性和方法。</p><p>需要注意的是，可以使用 foo 调用 O 的属性和方法，但是却不可以重写，这是所有继承都应该满足的，被继承的内容是不可被使用者修改的。如果 foo 试图重写属性和方法，比如执行<code>foo.name = &#39;jiang&#39;</code>，只会在 foo 上创建一个 name 属性。但但是，我们知道 JS 中的引用类型比较特殊，虽然不可以重写，却可以修改其属性，比如，执行 <code>foo.colors.push(&#39;blue&#39;)</code>，就会修改原型上的 colors 属性了，并且这种修改会影响到 F 的其他实例，很明显这就不是我们想在继承中看到的了。这个“<strong>引用值问题</strong>”我们会在后面继续讨论。我们暂时继续看这段代码。</p><p>🏷️ 我们能否，把这段代码封装成一个通用的函数，<strong>用来产生可以继承某个父级对象 O 的一系列对象</strong>？这个自然不难实现。如下：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">create</span> (o) &#123;</span><br><span class="line">  <span class="keyword">let</span> F = <span class="keyword">function</span> (<span class="params"></span>) &#123; &#125;</span><br><span class="line">  F.<span class="property"><span class="keyword">prototype</span></span> = o</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">F</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> O = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;li&#x27;</span>,</span><br><span class="line">  <span class="attr">sayName</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> foo = <span class="title function_">create</span>(O)</span><br><span class="line">foo.<span class="property">age</span> = <span class="string">&#x27;18&#x27;</span></span><br><span class="line"><span class="keyword">let</span> bar = <span class="title function_">create</span>(O)</span><br><span class="line">bar.<span class="property">age</span> = <span class="string">&#x27;20&#x27;</span></span><br></pre></td></tr></table></figure><p>JS 的继承方式被人为地划分了好几种，而这种创建对象的方式，被称为<strong>原型式继承</strong>。这种继承方式，是纯原型式的继承，我们只是利用了原型上的数据能被共享这个特性，<strong>从外部看来，我们只是输入对象，然后就会产生一个新的拥有同样数据的对象</strong>。这也是《 JS 精粹》中所推崇的形式，它完全只依赖 JS 本身的特性，编程方式也更接近于函数式编程。</p><p>🏷️ 掌握纯原型式继承后，我们来看一种主要的继承方式——原型链继承。<strong>ECMA-262 把原型链定义为 ECMAScript 的主要继承方式</strong>。</p><p>我们先看一个继承的实例。代码如下：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;li&#x27;</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">colors</span> = [<span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params">age</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">nums</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Parent</span>()</span><br><span class="line"></span><br><span class="line">childA = <span class="keyword">new</span> <span class="title class_">Child</span>(<span class="string">&#x27;jiang&#x27;</span>, <span class="number">12</span>)</span><br><span class="line">childB = <span class="keyword">new</span> <span class="title class_">Child</span>(<span class="string">&#x27;li&#x27;</span>, <span class="number">13</span>)</span><br><span class="line">childA.<span class="title function_">sayName</span>() <span class="comment">//  &#x27;jiang&#x27;</span></span><br><span class="line">childB.<span class="title function_">sayName</span>() <span class="comment">//  &#x27;li&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(childB.<span class="property">age</span>) <span class="comment">// 13</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(childB <span class="keyword">instanceof</span> <span class="title class_">Parent</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(childB <span class="keyword">instanceof</span> <span class="title class_">Child</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>最不太好理解的的一步是 <strong><code>Child.prototype = new Parent ()</code></strong> 这步。我们一步步解释一下。</p><p>首先，我们先说下执行 <code>new  Parent ()</code> 会发生什么。前面我们有简单提到，当使用 <code>new</code> 运算符调用函数时，会产生一个新对象，新对象默认有一个内部属性原型 [[Prototype]]，它指向的就是函数的原型对象。下面，我们来补充一下 new 运算符的作用。从 new 的内部实现来说：</p><ol><li><p>在内存中创建一个新对象，我们暂时称其为 bar 吧。</p></li><li><p>bar 的 <code>[[Prototype]]</code> 属性被赋值为 Parent 的 <code>prototype</code> 属性。</p></li><li><p>函数内部的 <code>this</code> 被赋值为 bar。</p></li><li><p>执行 Parent 内部的代码。也就是</p> <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">colors</span> = [<span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>]</span><br></pre></td></tr></table></figure><p> 执行完后，bar 上会有属性 name 和 colors。</p></li><li><p>如果被调用函数没有返回一个非空对象，就返回创建的这个新对象，也就是我们前四步中提到的 bar，如果被调用的函数中主动 return 一个非空对象，那就返回这个非空对象。</p></li></ol><p>被用 new 运算符调用的函数，我们称其为<strong>构造函数</strong>。也就是此时我们可以称 bar 的构造函数为 Parent，而 bar 可以称为 Parent 的<strong>实例</strong>。</p><p>我们可以看到，new 总的来说，有两个作用：</p><ol><li>产生一个新对象：对象的原型指向原型对象。</li><li>执行函数代码：函数内部的 this 指的是新对象，对 this 的操作就是操作这个新对象。</li></ol><p>因为 new 很关键，可以说是 JS 中用来产生新对象的最底层方式。所以说得啰嗦了点。</p><p>所以，new Parent() 后，我们得到了一个新对象，还是称其为 bar 吧。bar 的原型指向 Parent 的原型对象。然后，最关键的一步来了，我们把 bar 再赋值给 Child 的原型对象，所以 new Child() 的时候，childA 和 childB 的原型就是 bar 。</p><p>这样，我们就创造出了一条原型链：childA 和 childB 的原型是 bar，bar 的原型是 Parent.prototype。</p><p>所以此时 childA 拥有自己的属性 age 和 nums，同时可以访问到它的原型链上的 name 和 colors 以及 sayName 方法。</p><p>原型链继承的优势之一是可以更好地模拟类，从而更接近面向对象编程。以上代码，我们其实就简单实现了类的概念。</p><p>🏷️ 类是支持面向对象的语言的核心语法，可以看成是批量创建对象的一个模板，一般都会满足以下几条。</p><ol><li>一个类可以通过被继承产生多个<strong>子类</strong>，这些子类拥有父类的属性和方法。</li><li>一个类可以产生多个<strong>实例</strong>，每个实例都拥有类的属性和方法。</li><li>类有个<strong>构造函数</strong>，在类被<strong>实例化</strong>时调用。</li></ol><p>构造函数 Child 和 Parent 此时扮演的角色就是产生实例 childA 的类及其父类。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(childB <span class="keyword">instanceof</span> <span class="title class_">Child</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>我们其实可以发现，childA 继承到的方法和属性的来源不同。sayName 这个方法来自于其原型链，我们称这种策略叫<strong>原型链继承</strong>，而 age 和 nums 属性来自于其构造函数，我们称这种方式叫<strong>构造函数式继承</strong>。</p><p>其实，将方法和属性用不同的方式继承是我们有意为之的，原因是，</p><ul><li>如果方法定义在构造函数里，那么每个实例都需要复制一份方法，性能不佳， 所以放在原型链上，大家都用同一个就行。</li><li>如果属性定义在原型对象上，大家用一个属性，就会出现前面提到的引用值问题，而用构造函数实现继承，每个实例上的对象是单独的，如上，childA 和 childB 上的 nums 是独立的，就不会出现引用值问题。</li></ul><p>刚刚刻意没有提到 colors 和 name 这两个属性，他们是定义在 Parent 这个构造函数里，但对 childA 来说，它却是来自其原型链第一环 bar。所以，对于 childA 来说，这两个属性也算是原型链继承，childA 和 childB 会共用 colors，同样会出现前面提到的引用值问题。</p><p>除了引用值问题，原型链继承还有个问题很明显，调用子类时无法对父类进行传参。</p><p>🏷️ 这两个问题解决起来也比较简单。使用 <code>Function.prototype.call()</code> 或者 <code>Function.prototype.apply()</code> 函数。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">colors</span> = [<span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="title class_">Parent</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name)</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">nums</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Parent</span>()</span><br><span class="line">childA = <span class="keyword">new</span> <span class="title class_">Child</span>(<span class="string">&#x27;jiang&#x27;</span>, <span class="number">12</span>)</span><br><span class="line">childB = <span class="keyword">new</span> <span class="title class_">Child</span>(<span class="string">&#x27;li&#x27;</span>, <span class="number">13</span>)</span><br><span class="line">childA.<span class="title function_">sayName</span>() <span class="comment">//  &#x27;jiang&#x27;</span></span><br><span class="line">childB.<span class="title function_">sayName</span>() <span class="comment">//  &#x27;li&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(childB.<span class="property">age</span>) <span class="comment">// 13</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(childB <span class="keyword">instanceof</span> <span class="title class_">Parent</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>call 函数的高光时刻。此时，就可以对 Parent 进行传参了。</p><p>此时 Child 函数在被调用的时候相当于执行下面代码：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">color</span> = [<span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>]</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是说，此时, name、colors 和 age 一样了，childA 和 childB 会拥有自己的 colors 属性，就不会再有引用值问题。</p><p>这种方式称为<strong>组合继承</strong>。（组合是指<strong>原型链+盗用构造函数</strong>)</p><p>组合继承弥补了很多问题，<strong>是 JavaScript 中使用最多的继承模式。</strong></p><p>虽然组合继承解决了原型链继承的两个问题，但是又带来了新的问题，需要继续改造一下。前面我们提到，只使用原型链继承的方式中，childA 拥有自己的属性 age，同时可以访问到它的原型上的 name 和 colors，但现在组合继承的例子中，盗用构造函数后，childA 有自己的 name 和 colors 属性了，所以 childA 的原型上不需要再有 name 和 colors 了，也就是 Child.prototype 上不需要有 name 和 colors 了。</p><p>🏷️ 所以，我们对 Child.prototype = new Parent() 这一步做一下改造。只让子类的原型对象拥有父类原型对象的属性和方法，而没有父类构造函数上的属性和方法。</p><p>设置</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">inheritPrototype</span> (<span class="title class_">Child</span>, <span class="title class_">Parent</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> prototype = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>) <span class="comment">// 子类原型对象原型指向 Parent.prototype</span></span><br><span class="line">  prototype.<span class="property">constructor</span> = <span class="title class_">Child</span> <span class="comment">// 原型对象的构造函数指向子类</span></span><br><span class="line">  <span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span> = prototype</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在代码就变成了</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span> (name) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span> (name) &#123;</span><br><span class="line">  <span class="title class_">Parent</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">inheritPrototype</span>(<span class="title class_">Child</span>, <span class="title class_">Parent</span>)</span><br><span class="line">childA = <span class="keyword">new</span> <span class="title class_">Child</span>(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line">childB = <span class="keyword">new</span> <span class="title class_">Child</span>(<span class="string">&#x27;jiang&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>这种方式也有一个名字，叫寄生式组合继承。（寄生式+组合，寄生式是指 Object.create 这种方式，这里的寄生式，主要是指采用寄生式的方式继承父类原型）</strong></p><p>寄生式组合继承通过盗用构造函数继承属性，但使用混合式原型链继承方法。 <strong>寄生式组合继承可以算是引用类型继承的最佳模式。</strong></p><h3 id="番外：Some-Interesting-Points"><a href="#番外：Some-Interesting-Points" class="headerlink" title="番外：Some Interesting Points"></a>番外：Some Interesting Points</h3><p>1️⃣ new 运算符可能是 JS 中新建对象最底层的方式？</p><p>在 JS 中能实现继承的最最基础方式，</p><ul><li>一种是纯利用原型的，也就是原型式继承，就是一个对象原型上的属性和方法可以被这个对象使用。 这种方式，从外部来看，完全就是纯对象和纯对象之间的属性共享关系。 对象 A–&gt;对象 B–&gt;对象 C。这种方式的代码里 new 运算符的作用是创建一个新对象，并给这个新对象的原型赋值，所以依旧是纯原型式的。  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> create = <span class="keyword">function</span> (<span class="params">O</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> F = <span class="keyword">function</span> (<span class="params"></span>) &#123; &#125;</span><br><span class="line">  F.<span class="property"><span class="keyword">prototype</span></span> = O</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">F</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> A = &#123; <span class="attr">name</span>: <span class="string">&#x27;li&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">B1</span> = <span class="title function_">create</span>(A)</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">B2</span> = <span class="title function_">create</span>(A)</span><br><span class="line"><span class="keyword">const</span> C = <span class="title function_">create</span>(<span class="variable constant_">B1</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(<span class="variable constant_">B1</span>) === A) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(C) === <span class="variable constant_">B1</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li>第二种是使用 call 和 apply 函数，这两个函数比较特殊，能转换作用域，使得父函数上对属性和方法的赋值语句可以被子函数盗用，进而也实现了共享，这种方式叫盗用构造函数。这种方式的代码里 new 运算符的作用是创建一个新对象，并执行函数，使得这个新对象拥有函数定义的属性和方法。 函数 A–&gt;函数 B–&gt;对象 C  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">A</span> (name) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">B</span> (name) &#123;</span><br><span class="line">  A.<span class="title function_">call</span>(<span class="variable language_">this</span>, name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> C = <span class="keyword">new</span> <span class="title function_">B</span>(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(C.<span class="property">name</span>) <span class="comment">// li</span></span><br></pre></td></tr></table></figure></li></ul><p>不管哪种方式。我们可以看到都需要用到构造函数。</p><p>非得使用一个临时构造函数，我猜是因为 <strong>new 运算符是底层唯一的创建对象的方式</strong>。因为我们还知道，即使我们用字面量创建一个对象，也是会说，底层执行了 <code>new Object()</code> 。</p><p>2️⃣ 为什么很少使用 <code>setPrototypeof</code> 函数？</p><p>如果我们想要更改对象的原型，要么就是修改其构造函数的原型对象，要么就是直接 <code>setPrototypeOf</code> 进行设置。</p><p>但我们一般都不会使用 <code>setPrototypeof</code> 函数，为什么？</p><p><em>如果你关心性能，你应该避免设置一个对象的 <code>[[Prototype]]</code>。相反，你应该使用 <code>Object.create()</code> 来创建带有你想要的 <code>[[Prototype]]</code>的新对象。</em></p><img src="/2023/03/13/inherit-in-js/banner.jpg" class="" title="banner">]]></content>
      
      
      <categories>
          
          <category> 《都 4202 年了，我还在读红宝书！》 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
